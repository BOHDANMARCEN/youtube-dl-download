import gradio as gr
import yt_dlp
import os
import re
from urllib.parse import urlparse, parse_qs

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
DOWNLOAD_DIR = "downloads"
if not os.path.exists(DOWNLOAD_DIR):
    os.makedirs(DOWNLOAD_DIR)

def clean_youtube_url(url):
    """–û—á–∏—â–∞—î YouTube URL –≤—ñ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–ª–µ–π–ª–∏—Å—Ç—É —Ç–∞ —ñ–Ω—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤."""
    if not url:
        return url
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–ª–µ–π–ª–∏—Å—Ç—É —Ç–∞ —ñ–Ω—à—ñ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    if 'youtube.com' in url or 'youtu.be' in url:
        # –î–ª—è youtube.com/watch?v=VIDEO_ID&list=...
        if 'watch?v=' in url:
            video_id = url.split('watch?v=')[1].split('&')[0]
            return f"https://www.youtube.com/watch?v={video_id}"
        
        # –î–ª—è youtu.be/VIDEO_ID?list=...
        elif 'youtu.be/' in url:
            video_id = url.split('youtu.be/')[1].split('?')[0]
            return f"https://www.youtube.com/watch?v={video_id}"
    
    return url

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
DOWNLOAD_DIR = "downloads"
if not os.path.exists(DOWNLOAD_DIR):
    os.makedirs(DOWNLOAD_DIR)

def get_quality_options(url):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –æ–ø—Ü—ñ–π —è–∫–æ—Å—Ç—ñ –±–µ–∑ –¥–æ–≤–≥–æ—ó –æ–±—Ä–æ–±–∫–∏."""
    if not url or not url.strip():
        return [
            gr.update(visible=False),
            gr.update(visible=False),
            gr.update(value="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å URL –≤—ñ–¥–µ–æ")
        ]
    
    # –û—á–∏—â–∞—î–º–æ URL –≤—ñ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–ª–µ–π–ª–∏—Å—Ç—É
    clean_url = clean_youtube_url(url.strip())
    
    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –≤–∏–∑–Ω–∞—á–µ–Ω—ñ, –Ω–∞–¥—ñ–π–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —è–∫–æ—Å—Ç—ñ
    quality_choices = [
        ("–ù–∞–π–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å (–í—ñ–¥–µ–æ+–ê—É–¥—ñ–æ, –º–æ–∂–µ –≤–∏–º–∞–≥–∞—Ç–∏ ffmpeg)", "bestvideo+bestaudio/best"),
        ("–ù–∞–π–∫—Ä–∞—â–∞ MP4 (–¥–æ 1080p)", "bestvideo[ext=mp4][height<=1080]+bestaudio[ext=m4a]/best[ext=mp4]"),
        ("720p", "bestvideo[height<=720]+bestaudio/best"),
        ("480p", "bestvideo[height<=480]+bestaudio/best"),
        ("360p", "bestvideo[height<=360]+bestaudio/best"),
        ("–ù–∞–π–∫—Ä–∞—â–µ –∞—É–¥—ñ–æ (m4a)", "bestaudio[ext=m4a]/bestaudio"),
        ("–ù–∞–π–∫—Ä–∞—â–µ –∞—É–¥—ñ–æ (mp3)", "bestaudio/best")
    ]
    
    return [
        gr.update(choices=quality_choices, value=quality_choices[0][1], visible=True),
        gr.update(visible=True),
        gr.update(value=f"–§–æ—Ä–º–∞—Ç–∏ –≥–æ—Ç–æ–≤—ñ. –í–∏–±–µ—Ä—ñ—Ç—å —è–∫—ñ—Å—Ç—å —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏'.\n–û—á–∏—â–µ–Ω–∏–π URL: {clean_url}")
    ]


def download_video(url, quality_selector):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—ñ–¥–µ–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä —è–∫–æ—Å—Ç—ñ."""
    if not quality_selector or not url:
        yield "–ü–æ–º–∏–ª–∫–∞: URL –∞–±–æ —è–∫—ñ—Å—Ç—å –Ω–µ –≤–∏–±—Ä–∞–Ω–æ."
        return
    
    # –û—á–∏—â–∞—î–º–æ URL –≤—ñ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–ª–µ–π–ª–∏—Å—Ç—É
    clean_url = clean_youtube_url(url.strip())
    
    yield f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ...\n–û—á–∏—â–µ–Ω–∏–π URL: {clean_url}"
    
    try:
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è yt-dlp
        ydl_opts = {
            'format': quality_selector,
            'outtmpl': os.path.join(DOWNLOAD_DIR, '%(title)s.%(ext)s'),
            'merge_output_format': 'mp4',
            'postprocessor_args': [],
            'progress_hooks': [lambda d: print(f">>> {d.get('_percent_str', '0%')} of ~{d.get('_total_bytes_str', 'unknown')} at {d.get('_speed_str', 'unknown')}", end="\r") if d.get('status') == 'downloading' else None],
            # –í–∞–∂–ª–∏–≤–æ: –æ–±–º–µ–∂—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–∏–º –≤—ñ–¥–µ–æ
            'playlistend': 1,
            'noplaylist': True,
        }

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ mp3, –¥–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –ø–æ—Å—Ç-–ø—Ä–æ—Ü–µ—Å–æ—Ä
        if "mp3" in quality_selector:
            ydl_opts['postprocessors'] = [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }]

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(clean_url, download=True)
            filename = ydl.prepare_filename(info)
            
        yield f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫: {os.path.basename(filename)}"

    except Exception as e:
        error_msg = str(e)
        if "Video unavailable" in error_msg:
            yield "‚ùå –ü–æ–º–∏–ª–∫–∞: –í—ñ–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –∞–±–æ –ø—Ä–∏–≤–∞—Ç–Ω–µ"
        elif "Private video" in error_msg:
            yield "‚ùå –ü–æ–º–∏–ª–∫–∞: –ü—Ä–∏–≤–∞—Ç–Ω–µ –≤—ñ–¥–µ–æ"
        elif "Video unavailable" in error_msg:
            yield "‚ùå –ü–æ–º–∏–ª–∫–∞: –í—ñ–¥–µ–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ"
        else:
            yield f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {error_msg}"

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Gradio
with gr.Blocks(theme=gr.themes.Soft(), title="YouTube Downloader") as demo:
    gr.Markdown("# üé• YouTube Downloader v2")
    gr.Markdown("""
    ### –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:
    1. **–í—Å—Ç–∞–≤—Ç–µ URL** –≤—ñ–¥–µ–æ (YouTube, Vimeo, TikTok —Ç–æ—â–æ)
    2. **–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏"** - —Ü–µ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –º–∏—Ç—Ç—î–≤–æ
    3. **–í–∏–±–µ—Ä—ñ—Ç—å —è–∫—ñ—Å—Ç—å** –∑ –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É
    4. **–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"** –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    
    **üí° –ü–æ—Ä–∞–¥–∞:** –î–ª—è –Ω–∞–π–∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å [ffmpeg](https://ffmpeg.org/download.html)
    **üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ:** –ü—Ä–æ–≥—Ä–∞–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—á–∏—â–∞—î URL –≤—ñ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–ª–µ–π–ª–∏—Å—Ç—É
    """)

    with gr.Row():
        with gr.Column(scale=3):
            url_input = gr.Textbox(
                label="üîó URL –≤—ñ–¥–µ–æ", 
                placeholder="https://www.youtube.com/watch?v=...",
                lines=1
            )
            fetch_button = gr.Button("üìã –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏", variant="secondary")
            
        with gr.Column(scale=2):
            quality_dropdown = gr.Dropdown(
                label="üéØ –í–∏–±–µ—Ä—ñ—Ç—å —è–∫—ñ—Å—Ç—å", 
                visible=False,
                interactive=True
            )
            download_button = gr.Button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", variant="primary", visible=False)
    
    status_output = gr.Textbox(
        label="üìä –°—Ç–∞—Ç—É—Å", 
        interactive=False,
        lines=3,
        value="–í–≤–µ–¥—ñ—Ç—å URL –≤—ñ–¥–µ–æ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏'"
    )

    fetch_button.click(
        fn=get_quality_options,
        inputs=url_input,
        outputs=[quality_dropdown, download_button, status_output]
    )
    
    download_button.click(
        fn=download_video,
        inputs=[url_input, quality_dropdown],
        outputs=status_output
    )

if __name__ == "__main__":
    demo.launch()